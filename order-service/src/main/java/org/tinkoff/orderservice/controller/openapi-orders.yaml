openapi: "3.0.3"
info:
  title: "Order service OpenAPI definition"
  description: "T-Eats API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8082"
    description: "Generated server url"
paths:
  /rest/orders:
    get:
      tags:
        - "order-controller"
      operationId: "getOrderList"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CreateOrderResponse"
    patch:
      tags:
        - "order-controller"
      operationId: "patchOrders"
      parameters:
        - name: "ids"
          in: "query"
          required: true
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JsonNode"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "integer"
                  format: "int64"
    delete:
      tags:
        - "order-controller"
      operationId: "deleteOrders"
      parameters:
        - name: "ids"
          in: "query"
          required: true
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int64"
      responses:
        "200":
          description: "OK"
  /rest/orders/{id}:
    get:
      tags:
        - "order-controller"
      operationId: "getOrderById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CreateOrderResponse"
    patch:
      tags:
        - "order-controller"
      operationId: "patchOrder"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JsonNode"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CreateOrderResponse"
    delete:
      tags:
        - "order-controller"
      operationId: "deleteOrder"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int64"
  /rest/orders/by-ids:
    get:
      tags:
        - "order-controller"
      operationId: "getOrdersByIds"
      parameters:
        - name: "ids"
          in: "query"
          required: true
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CreateOrderResponse"
  /rest/orders/create:
    post:
      tags:
        - "order-controller"
      operationId: "createOrder"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /rest/orders/user/{userId}:
    get:
      tags:
        - "order-controller"
      operationId: "getOrdersByUserId"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CreateOrderResponse"
  /rest/orders/{id}/status/preparing:
    patch:
      tags:
        - "order-controller"
      operationId: "setOrderStatusPreparing"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /rest/orders/{id}/status/ready:
    patch:
      tags:
        - "order-controller"
      operationId: "setOrderStatusReady"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /rest/orders/{id}/status/delivered:
    patch:
      tags:
        - "order-controller"
      operationId: "setOrderStatusDelivered"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
components:
  schemas:
    Instant:
      type: "object"
      properties:
        nano:
          type: "integer"
          format: "int32"
        epochSecond:
          type: "integer"
          format: "int64"
    BigDecimal:
      type: "object"
      properties: { }
    DishDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        description:
          type: "string"
        price:
          $ref: "#/components/schemas/BigDecimal"
        quantity:
          type: "integer"
          format: "int32"
    CreateOrderResponse:
      type: "object"
      properties:
        orderDate:
          $ref: "#/components/schemas/Instant"
        status:
          type: "string"
        updatedAt:
          $ref: "#/components/schemas/Instant"
        userId:
          type: "integer"
          format: "int64"
        restaurantId:
          type: "integer"
          format: "int64"
        dishes:
          type: "array"
          items:
            $ref: "#/components/schemas/DishDto"
    CreateOrderRequest:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int64"
        restaurantId:
          type: "integer"
          format: "int64"
        dishes:
          type: "integer"
          format: "int64"
    JsonNode:
      type: "object"
      properties:
        integralNumber:
          type: "boolean"
        double:
          type: "boolean"
        valueNode:
          type: "boolean"
        floatingPointNumber:
          type: "boolean"
        bigInteger:
          type: "boolean"
        nodeType:
          type: "string"
          enum:
            - "ARRAY"
            - "BINARY"
            - "BOOLEAN"
            - "MISSING"
            - "NULL"
            - "NUMBER"
            - "OBJECT"
            - "POJO"
            - "STRING"
        float:
          type: "boolean"
        int:
          type: "boolean"
        long:
          type: "boolean"
        textual:
          type: "boolean"
        empty:
          type: "boolean"
        missingNode:
          type: "boolean"
        pojo:
          type: "boolean"
        number:
          type: "boolean"
        boolean:
          type: "boolean"
        "null":
          type: "boolean"
        array:
          type: "boolean"
        binary:
          type: "boolean"
        containerNode:
          type: "boolean"
        short:
          type: "boolean"
        bigDecimal:
          type: "boolean"
        object:
          type: "boolean"